// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.

package org.xebia.conference.view.gwt.client.managed.ui;

import com.google.gwt.core.client.GWT;
import com.google.gwt.i18n.client.DateTimeFormat;
import com.google.gwt.i18n.client.NumberFormat;
import com.google.gwt.text.client.DateTimeFormatRenderer;
import com.google.gwt.text.shared.AbstractRenderer;
import com.google.gwt.text.shared.Renderer;
import com.google.gwt.uibinder.client.UiBinder;
import com.google.gwt.uibinder.client.UiField;
import com.google.gwt.user.cellview.client.CellTable;
import com.google.gwt.user.cellview.client.HasKeyboardSelectionPolicy.KeyboardSelectionPolicy;
import com.google.gwt.user.cellview.client.TextColumn;
import com.google.gwt.user.client.ui.Button;
import com.google.gwt.user.client.ui.HTMLPanel;
import java.util.HashSet;
import java.util.Set;
import org.xebia.conference.view.gwt.client.proxy.SpeakerProxy;
import org.xebia.conference.view.gwt.client.proxy.TalkProxy;
import org.xebia.conference.view.gwt.client.scaffold.place.AbstractProxyListView;

public abstract class SpeakerListView_Roo_Gwt extends AbstractProxyListView<SpeakerProxy> {

    @UiField
    CellTable<SpeakerProxy> table;

    protected Set<String> paths = new HashSet<String>();

    public void init() {
        paths.add("id");
        table.addColumn(new TextColumn<SpeakerProxy>() {

            Renderer<java.lang.Long> renderer = new AbstractRenderer<java.lang.Long>() {

                public String render(java.lang.Long obj) {
                    return obj == null ? "" : String.valueOf(obj);
                }
            };

            @Override
            public String getValue(SpeakerProxy object) {
                return renderer.render(object.getId());
            }
        }, "Id");
        paths.add("firstname");
        table.addColumn(new TextColumn<SpeakerProxy>() {

            Renderer<java.lang.String> renderer = new AbstractRenderer<java.lang.String>() {

                public String render(java.lang.String obj) {
                    return obj == null ? "" : String.valueOf(obj);
                }
            };

            @Override
            public String getValue(SpeakerProxy object) {
                return renderer.render(object.getFirstname());
            }
        }, "Firstname");
        paths.add("lastname");
        table.addColumn(new TextColumn<SpeakerProxy>() {

            Renderer<java.lang.String> renderer = new AbstractRenderer<java.lang.String>() {

                public String render(java.lang.String obj) {
                    return obj == null ? "" : String.valueOf(obj);
                }
            };

            @Override
            public String getValue(SpeakerProxy object) {
                return renderer.render(object.getLastname());
            }
        }, "Lastname");
        paths.add("email");
        table.addColumn(new TextColumn<SpeakerProxy>() {

            Renderer<java.lang.String> renderer = new AbstractRenderer<java.lang.String>() {

                public String render(java.lang.String obj) {
                    return obj == null ? "" : String.valueOf(obj);
                }
            };

            @Override
            public String getValue(SpeakerProxy object) {
                return renderer.render(object.getEmail());
            }
        }, "Email");
        paths.add("organization");
        table.addColumn(new TextColumn<SpeakerProxy>() {

            Renderer<java.lang.String> renderer = new AbstractRenderer<java.lang.String>() {

                public String render(java.lang.String obj) {
                    return obj == null ? "" : String.valueOf(obj);
                }
            };

            @Override
            public String getValue(SpeakerProxy object) {
                return renderer.render(object.getOrganization());
            }
        }, "Organization");
        paths.add("birthdate");
        table.addColumn(new TextColumn<SpeakerProxy>() {

            Renderer<java.util.Date> renderer = new DateTimeFormatRenderer(DateTimeFormat.getFormat(DateTimeFormat.PredefinedFormat.DATE_SHORT));

            @Override
            public String getValue(SpeakerProxy object) {
                return renderer.render(object.getBirthdate());
            }
        }, "Birthdate");
        paths.add("age");
        table.addColumn(new TextColumn<SpeakerProxy>() {

            Renderer<java.lang.Long> renderer = new AbstractRenderer<java.lang.Long>() {

                public String render(java.lang.Long obj) {
                    return obj == null ? "" : String.valueOf(obj);
                }
            };

            @Override
            public String getValue(SpeakerProxy object) {
                return renderer.render(object.getAge());
            }
        }, "Age");
        paths.add("created");
        table.addColumn(new TextColumn<SpeakerProxy>() {

            Renderer<java.util.Date> renderer = new DateTimeFormatRenderer(DateTimeFormat.getFormat(DateTimeFormat.PredefinedFormat.DATE_SHORT));

            @Override
            public String getValue(SpeakerProxy object) {
                return renderer.render(object.getCreated());
            }
        }, "Created");
        paths.add("talks");
        table.addColumn(new TextColumn<SpeakerProxy>() {

            Renderer<java.util.Set> renderer = org.xebia.conference.view.gwt.client.scaffold.place.CollectionRenderer.of(org.xebia.conference.view.gwt.client.managed.ui.TalkProxyRenderer.instance());

            @Override
            public String getValue(SpeakerProxy object) {
                return renderer.render(object.getTalks());
            }
        }, "Talks");
        paths.add("version");
        table.addColumn(new TextColumn<SpeakerProxy>() {

            Renderer<java.lang.Integer> renderer = new AbstractRenderer<java.lang.Integer>() {

                public String render(java.lang.Integer obj) {
                    return obj == null ? "" : String.valueOf(obj);
                }
            };

            @Override
            public String getValue(SpeakerProxy object) {
                return renderer.render(object.getVersion());
            }
        }, "Version");
    }
}
